import { Direction, CardType, CardSide } from './Card';
import { InventoryItem } from './Inventory';

type CardKey = 'vines' | 'hook' | 'water' | 'flint' | 'palmTrees' | 'sticks' | 'bottle' | 
    'higherGround' | 'telescope' | 'rocks' | 'pig' | 'storm' | 'mirage' | 'pirates' | 'mapRow' | 'mapCol';

type CardData = {
    [key in CardKey]: {
        back: CardSide;
        front: CardSide;
    }
};

interface UpdateLivesResult {
    lives: number;
}

// Update lives (increase or decrease)
export const updateLives = (oldLives: number, lives: number): UpdateLivesResult => {
    const newLives = lives < 0 
        ? Math.max(0, oldLives + lives)  // Decrease lives but not below 0
        : Math.min(16, oldLives + lives); // Increase lives but not above 16
    
    return { lives: newLives };
};

const mapCardSide: CardSide = {
    id: 'map',
    russianName: '–ö–∞—Ä—Ç–∞',
    type: 'back' as CardType,
    emoji: 'üó∫Ô∏è',
    description: '–ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, –≥–¥–µ –∏—Å–∫–∞—Ç—å —Å–æ–∫—Ä–æ–≤–∏—â–µ!',
    addToInventory: true,
    canActivate: (context) => {
        // –û–±–µ —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –ø–æ–ª–µ
        const mapRResult = context.positionSystem.findCardById('map-r');
        const mapCResult = context.positionSystem.findCardById('map-c');

        if (!mapRResult || !mapCResult) return false;

        // –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Ä—è–¥–∞ map-r –∏ –∫–æ–ª–æ–Ω–∫–∏ map-c
        return mapRResult.position.row === context.playerPosition!.row && 
               mapCResult.position.col === context.playerPosition!.col;
    },
    onPlace: (context) => {
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±–µ –∫–∞—Ä—Ç—ã –Ω–∞ –ø–æ–ª–µ
        const mapRResult = context.positionSystem.findCardById('map-r');
        const mapCResult = context.positionSystem.findCardById('map-c');
        
        let newContext = { ...context };
        
        if (mapRResult) {
            newContext = mapRResult.card.flip(newContext);
        }
        
        if (mapCResult) {
            newContext = mapCResult.card.flip(newContext);
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        newContext = {
            ...newContext,
            inventory: newContext.inventory.removeById('map')
        };
        
        return newContext;
    }
};

// Card data objects
export const CARD_DATA: CardData = {
    vines: {
        back: {
            id: 'vines',
            russianName: '–õ–∏–∞–Ω—ã',
            direction: 'SW' as Direction,
            requirements: 'palm-trees',
            requirementsText: '–Ω—É–∂–Ω–∞ üå¥',
            type: 'back' as CardType,
            emoji: 'üåø',
            description: '–í —ç—Ç–∏—Ö –ª–∏—Å—Ç—å—è—Ö –º–æ–∂–Ω–æ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –æ—Ç —à—Ç–æ—Ä–º–∞',
            addToInventory: true,
        },
        front: {
            id: 'shelter',
            russianName: '–£–±–µ–∂–∏—â–µ',
            lives: 2,
            score: 2,
            type: 'front' as CardType,
            emoji: 'üè†',
            description: '–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç —à—Ç–æ—Ä–º–∞',
            addToInventory: true,
            onPlace: (context) => {
                const { lives } = updateLives(context.lives, 2);
                return { ...context, lives };
            }
        }
    },
    hook: {
        back: {
            id: 'hook',
            russianName: '–ö—Ä—é—á–æ–∫',
            direction: 'NE' as Direction,
            requirements: 'water',
            requirementsText: '–Ω—É–∂–Ω–∞ üíß',
            type: 'back' as CardType,
            emoji: 'üé£',
            description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±—ã—Ç—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ä—ã–±—É',
            addToInventory: true,
        },
        front: {
            id: 'fish',
            russianName: '–†—ã–±–∞',
            lives: 3,
            type: 'front' as CardType,
            emoji: 'üêü',
            description: '–í–∫—É—Å–Ω–æ—Ç–∏—â–∞! –°–º–æ–≥—É –µ—â—ë –ø—Ä–æ–∂–∏—Ç—å –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç—Ä–æ–≤–µ!',
            addToInventory: true,
            onPlace: (context) => {
                const { lives } = updateLives(context.lives, 3);
                return { ...context, lives };
            }
        }
    },
    water: {
        back: {
            id: 'water',
            russianName: '–í–æ–¥–∞',
            lives: 2,
            requirements: 'telescope',
            requirementsText: '–Ω—É–∂–Ω–∞ üî≠',
            type: 'back' as CardType,
            emoji: 'üíß',
            description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å–≤–µ–∂–∏—Ç—å—Å—è –∏ –Ω–∞–±—Ä–∞—Ç—å —Å–∏–ª',
            addToInventory: true,
            onPlace: (context) => {
                const { lives } = updateLives(context.lives, 2);
                return { ...context, lives };
            }
        },
        front: {
            id: 'waterfall',
            russianName: '–í–æ–¥–æ–ø–∞–¥',
            lives: 2,
            type: 'front' as CardType,
            emoji: 'üåä',
            description: '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å–≤–µ–∂–∏—Ç—å—Å—è –∏ –Ω–∞–±—Ä–∞—Ç—å —Å–∏–ª',
            addToInventory: true,
            onPlace: (context) => {
                const { lives } = updateLives(context.lives, 2);
                return { ...context, lives };
            }
        }
    },
    flint: {
        back: {
            id: 'flint',
            russianName: '–ö—Ä–µ–º–µ–Ω—å',
            requirements: 'vines',
            requirementsText: '–Ω—É–∂–Ω–∞ üåø',
            type: 'back' as CardType,
            emoji: '‚ö°',
            description: '–ú–æ–∂–Ω–æ —Å–∂–µ—á—å —ç—Ç–∏ –ª–∏—Å—Ç—å—è –∏ —Å–¥–µ–ª–∞—Ç—å –∫–æ—Å—Ç–µ—Ä',
            addToInventory: true,
        },
        front: {
            id: 'torch',
            russianName: '–§–∞–∫–µ–ª',
            score: 2,
            type: 'front' as CardType,
            emoji: 'üïØÔ∏è',
            description: '–≠—Ç–æ—Ç —Ñ–∞–∫–µ–ª —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ –Ω–∞ –≤–µ—Ä—à–∏–Ω—É –≥–æ—Ä—ã!',
            addToInventory: true,
        }
    },
    palmTrees: {
        back: {
            id: 'palm-trees',
            russianName: '–ü–∞–ª—å–º—ã',
            direction: 'SE' as Direction,
            requirements: 'rocks',
            requirementsText: '–Ω—É–∂–Ω–∞ üß±',
            type: 'back' as CardType,
            emoji: 'üå¥',
            description: '–ê —á—Ç–æ —è —Ç–∞–º –≤–∏–∂—É? –ö–æ–∫–æ—Å—ã!',
            addToInventory: true,
        },
        front: {
            id: 'coconuts',
            russianName: '–ö–æ–∫–æ—Å—ã',
            lives: 2,
            type: 'front' as CardType,
            emoji: 'ü••',
            description: '–ú–º–º, –∫–∞–∫ –≤–∫—É—Å–Ω–æ!',
            addToInventory: true,
            onPlace: (context) => {
                const { lives } = updateLives(context.lives, 2);
                return { ...context, lives };
            }
        }
    },
    sticks: {
        back: {
            id: 'sticks',
            russianName: '–í–µ—Ç–∫–∏',
            direction: 'NW' as Direction,
            requirements: 'flint',
            requirementsText: '–Ω—É–∂–Ω–∞ ‚ö°',
            type: 'back' as CardType,
            emoji: 'ü•¢',
            description: '–•–º, —ç—Ç–∏ –≤–µ—Ç–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –æ—Ö–æ—Ç—ã',
            addToInventory: true,
        },
        front: {
            id: 'spear',
            russianName: '–ö–æ–ø—å–µ',
            score: 2,
            type: 'front' as CardType,
            emoji: 'üó°Ô∏è',
            description: '–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ —Å—Ç—Ä–∞—à–µ–Ω –∫–∞–±–∞–Ω! –°–∫–æ—Ä–µ–µ –Ω–∞–æ–±–æ—Ä–æ—Ç :)',
            addToInventory: true,
        }
    },
    bottle: {
        back: {
            id: 'bottle',
            russianName: '–ë—É—Ç—ã–ª–∫–∞',
            requirementsText: '–Ω—É–∂–µ–Ω –∫–æ—Ä–∞–±–ª—å –≤ –ø–µ—Ä–≤–æ–π –∫–ª–µ—Ç–∫–µ',
            type: 'back' as CardType,
            emoji: 'üçæ',
            description: '–ö–∞–∂–µ—Ç—Å—è, —è —Å–º–æ–≥—É –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ! –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞ —É–≥–ª—É!',
            addToInventory: false,
            canActivate: (context) => {
                const shipCard = context.positionSystem.getShipCard();
                return shipCard !== null && shipCard.skipMove;
            }
        },
        front: {
            id: 'message',
            russianName: '–°–æ–æ–±—â–µ–Ω–∏–µ',
            score: 3,
            type: 'front' as CardType,
            emoji: 'üìú',
            description: '–ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø—Ä–æ–π–¥–µ—Ç —Ä—è–¥–æ–º —Å —ç—Ç–æ–π –∫–ª–µ—Ç–∫–æ–π –∏ –æ–Ω–∞ –Ω–µ —É–≥–ª–æ–≤–∞—è, —Ç–æ —è –≤—ã–∏–≥—Ä–∞—é!',
            addToInventory: false,
        }
    },
    higherGround: {
        back: {
            id: 'higher-ground',
            russianName: '–í–æ–∑–≤—ã—à–µ–Ω–Ω–æ—Å—Ç—å',
            requirements: 'torch',
            requirementsText: '–Ω—É–∂–Ω–∞ üïØÔ∏è',
            type: 'back' as CardType,
            emoji: '‚õ∞Ô∏è',
            description: '–û—Ç—Å—é–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –≤–∏–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤!',
            addToInventory: false,
        },
        front: {
            id: 'lit-beacon',
            russianName: '–ú–∞—è–∫',
            score: 7,
            type: 'front' as CardType,
            emoji: 'üî•',
            description: '–ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —ç—Ç—É –∫–æ–ª–æ–Ω–∫—É, —Ç–æ —è –≤—ã–∏–≥—Ä–∞—é!',
            addToInventory: false,
        }
    },
    telescope: {
        back: {
            id: 'telescope',
            russianName: '–ü–æ–¥–∑–æ—Ä–Ω–∞—è —Ç—Ä—É–±–∞',
            requirementsText: '–Ω—É–∂–Ω–æ –±—ã—Ç—å –Ω–∞ ‚õ∞Ô∏è',
            type: 'back' as CardType,
            emoji: 'üî≠',
            description: '–¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è! –•–º, –æ–Ω –æ–≥–∏–±–∞–µ—Ç –æ—Å—Ç—Ä–æ–≤?',
            addToInventory: true,
            canActivate: (context) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ higher-ground
                const playerCard = context.positionSystem.getCard(context.playerPosition!);
                if (!playerCard || playerCard.getCurrentId() !== 'higher-ground') {
                    return false;
                }
                return true;
            }
        },
        front: {
            id: 'ship-sighted',
            russianName: '–ö–æ—Ä–∞–±–ª—å –∑–∞–º–µ—á–µ–Ω',
            score: 1,
            type: 'front' as CardType,
            emoji: 'üö¢',
            description: '–ö–æ—Ä–∞–±–ª—å –ø–æ—Å–ª–µ —É–≥–ª–∞ –ø–æ–ø–ª—ã–≤–µ—Ç –¥–∞–ª—å—à–µ, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑',
            addToInventory: true,
            onBeforeShipMove: (context) => {
                const shipPos = context.positionSystem.getShipPosition();
                const shipCard = context.positionSystem.getShipCard();
                if (!shipPos || !shipCard?.cornerManager.direction) {
                    return context;
                }

                const isAtCorner = shipCard.cornerManager?.isFinalCornerShipPosition(shipPos) ?? false;

                if (!shipCard.hasTurned && isAtCorner && shipCard.cornerManager) {
                    // –ö–æ—Ä–∞–±–ª—å –Ω–∞ —É–≥–ª—É –∏ –µ—â–µ –Ω–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–ª - –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    const newDirection = shipCard.cornerManager.getNextDirection();
                    shipCard.cornerManager.direction = newDirection;
                    shipCard.hasTurned = true;
                }

                return context;
            }
        }
    },
    rocks: {
        back: {
            id: 'rocks',
            russianName: '–ö–∞–º–Ω–∏',
            requirementsText: '–Ω—É–∂–Ω–æ –±—ã—Ç—å –Ω–∞ ‚õ∞Ô∏è',
            type: 'back' as CardType,
            emoji: 'üß±',
            description: '–Ø —Å–º–æ–≥—É –ø–æ–¥–∞—Ç—å SOS –≤ —ç—Ç–æ–º —Ä—è–¥—É! –ù–æ –∫–∞–∫ –ª—É—á—à–µ —É–≤–∏–¥–µ—Ç—å —Å–∫–ª–æ–Ω?',
            addToInventory: false,
            canActivate: (context) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ higher-ground
                const playerCard = context.positionSystem.getCard(context.playerPosition!);
                if (!playerCard || playerCard.getCurrentId() !== 'higher-ground') {
                    return false;
                }
                return true;
            }
        },
        front: {
            id: 'sos',
            russianName: 'SOS',
            score: 5,
            type: 'front' as CardType,
            emoji: 'üÜò',
            description: '–ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —ç—Ç–æ—Ç —Ä—è–¥, —Ç–æ —è –≤—ã–∏–≥—Ä–∞—é!',
            addToInventory: false,
        }
    },
    pig: {
        back: {
            id: 'pig',
            russianName: '–ö–∞–±–∞–Ω',
            lives: -2,
            requirements: 'spear',
            requirementsText: '–Ω—É–∂–Ω–∞ üó°Ô∏è',
            type: 'back' as CardType,
            emoji: 'üê∑',
            description: '–î–∏–∫–∏–π –∫–∞–±–∞–Ω –º–µ–Ω—è –ø–æ—Ä–∞–Ω–∏–ª! –ê —á—Ç–æ, –µ—Å–ª–∏ —è –µ–≥–æ –¥–æ–±—É–¥—É?',
            addToInventory: false,
            onPlace: (context) => {
                // –ï—Å–ª–∏ –µ—Å—Ç—å spear –∏–ª–∏ torch, —É—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–æ—Å–∏—Ç—Å—è
                const isProtected = context.inventory.findById('spear') || context.inventory.findById('torch');
                if (!isProtected) {
                    const { lives } = updateLives(context.lives, -2);
                    return { ...context, lives };
                }
                return context;
            }
        },
        front: {
            id: 'meat',
            russianName: '–ú—è—Å–æ',
            lives: 3,
            type: 'front' as CardType,
            emoji: 'üçΩÔ∏è',
            description: '–ú–º–º, —Ç–æ-—Ç–æ –∂–µ!',
            addToInventory: false,
            onPlace: (context) => {
                const { lives } = updateLives(context.lives, 3);
                return { ...context, lives };
            }
        }
    },
    storm: {
        back: {
            id: 'storm',
            russianName: '–®—Ç–æ—Ä–º',
            lives: -2,
            requirementsText: '13 –∫–∞—Ä—Ç–∞',
            type: 'back' as CardType,
            emoji: 'üåßÔ∏è',
            description: '–ú–µ–Ω—è –Ω–∞—Å—Ç–∏–≥ —à—Ç–æ—Ä–º! –ì–¥–µ –±—ã –º–Ω–µ —É–∫—Ä—ã—Ç—å—Å—è... –ß—Ç–æ, —ç—Ç–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Ç–æ—Ä–Ω–∞–¥–æ?!',
            addToInventory: false,
            onPlace: (context) => {
                // –ï—Å–ª–∏ –µ—Å—Ç—å shelter, —É—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–æ—Å–∏—Ç—Å—è
                const isProtected = context.inventory.findById('shelter');
                if (!isProtected) {
                    const { lives } = updateLives(context.lives, -2);
                    return { ...context, lives };
                }
                return context;
            },
            afterPlace: (context) => {
                if (context.positionSystem.countNonShipCards() === 13) {
                    const stormResult = context.positionSystem.findCardById('storm');
                    if (stormResult) {
                        stormResult.card.flip(context);
                    }
                }
                return context;
            }
        },
        front: {
            id: 'tornado',
            russianName: '–¢–æ—Ä–Ω–∞–¥–æ',
            lives: -3,
            type: 'front' as CardType,
            emoji: 'üå™Ô∏è',
            description: '–£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —É–±–µ–∂–∏—â–µ –∏ –∫–æ—Å—Ç–µ—Ä, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ',
            addToInventory: false,
            onPlace: (context) => {
                let newLives = context.lives;

                const tornadoResult = context.positionSystem.findCardById('tornado');
                const playerPosition = context.playerPosition;

                if (tornadoResult?.position.equals(playerPosition!)) {
                    const { lives } = updateLives(context.lives, -3);
                    newLives = lives;
                }

                // flip shelter and lit beacon back
                const shelterItem = context.inventory.findById('shelter');
                if (shelterItem) shelterItem.activate(context);

                const litBeaconResult = context.positionSystem.findCardById('lit-beacon');
                if (litBeaconResult) litBeaconResult.card.flip(context);
                
                // flip tornado back
                tornadoResult?.card.flip(context);

                return { ...context, lives: newLives };
            }
        }
    },
    mirage: {
        back: {
            id: 'mirage',
            russianName: '–ú–∏—Ä–∞–∂',
            requirementsText: '–ø—Ä–∏ –≤—Å–∫—Ä—ã—Ç–∏–∏',
            type: 'back' as CardType,
            emoji: 'üå´Ô∏è',
            description: '–°—Ä–∞–∑—É –∂–µ –∑–∞–º–µ–Ω—è–µ—Ç —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é –∫–∞—Ä—Ç—É –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è',
            addToInventory: false,
            onPlace: (context) => {
                const farthestPos = context.positionSystem.findFarthestPosition(context.playerPosition!);
                if (farthestPos) {
                    context.positionSystem.swapPositions(context.playerPosition!, farthestPos);
                    // flip the mirage card after swap
                    const card = context.positionSystem.getCard(farthestPos);
                    if (card) card.flip(context);
                }
                return { ...context, positionSystem: context.positionSystem };
            }
        },
        front: {
            id: 'sea-serpent',
            russianName: '–ú–æ—Ä—Å–∫–æ–π –∑–º–µ–π',
            type: 'front' as CardType,
            emoji: 'üêç',
            description: '–ö–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ—Å–∫–æ—á–µ—Ç —Å–æ—Å–µ–¥–Ω—é—é –∫–ª–µ—Ç–∫—É - –ª—É—á—à–µ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –±–µ—Ä–µ–≥—É',
            addToInventory: false,
            onShipMove: (context) => {
                const shipPos = context.positionSystem.getShipPosition();
                if (!shipPos) return context;
                const adjacentPositions = context.positionSystem.getAdjacentPositions(shipPos);
                const isAdjacent = adjacentPositions.some(adjPos => {
                    const card = context.positionSystem.getCard(adjPos);
                    return card && card.getCurrentId() === 'sea-serpent';
                });
                const shipCard = context.positionSystem.getShipCard();
                if (isAdjacent && shipCard) {
                    const extraPosition = shipCard.cornerManager.getNextShipPosition(
                        shipPos
                    );
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ä–∞–±–ª—è –≤ positionSystem
                    context.positionSystem.moveShip(extraPosition);
                    
                    return {
                        ...context,
                        positionSystem: context.positionSystem
                    };
                }
                return context;
            }
        }
    },
    pirates: {
        back: {
            id: 'pirates',
            russianName: '–ü–∏—Ä–∞—Ç—ã',
            requirementsText: '–∂–¥–∞—Ç—å –æ—Ç–ø–ª—ã—Ç–∏–µ –∫–æ—Ä–∞–±–ª—è',
            type: 'back' as CardType,
            emoji: 'üè¥‚Äç‚ò†Ô∏è',
            description: '–ö–∞–∂–µ—Ç—Å—è, —è –≤–∏–∂—É –ø–∏—Ä–∞—Ç–æ–≤? –¢–æ–≥–¥–∞ –Ω–∞–º –Ω–µ –ø–æ –ø—É—Ç–∏...',
            addToInventory: true,
            onBeforeShipMove: (context) => {
                const thisItem = context.inventory.findById('pirates');
                const shipCard = context.positionSystem.getShipCard();
                
                if (shipCard && !shipCard.skipMove) {
                    const newContext = thisItem!.activate(context);

                    newContext.positionSystem.removeShipPosition();                

                    return {
                        ...newContext,
                        positionSystem: newContext.positionSystem
                    };
                }
                return context;
            }
        },
        front: {
            id: 'compass',
            russianName: '–ö–æ–º–ø–∞—Å',
            type: 'front' as CardType,
            emoji: 'üß≠',
            description: '–£–¥–∞—á–∞! –Ø –Ω–∞—à–µ–ª –∫–æ–º–ø–∞—Å! –¢–µ–ø–µ—Ä—å —Å–º–æ–≥—É –±—ã—Å—Ç—Ä–µ–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –∏–∑—É—á–µ–Ω–Ω—ã–º –º–µ—Å—Ç–∞–º!',
            addToInventory: true,
            onRoundStart: (context) => {
                // –ï—Å–ª–∏ –∫–æ–º–ø–∞—Å –µ—Å—Ç—å –Ω–∞ –ø–æ–ª–µ, movesLeft = 2
                return { ...context, movesLeft: 2 };
            }
        }
    },
    mapRow: {
        back: {
            id: 'map-r',
            russianName: '–ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â 1/2',
            type: 'back' as CardType,
            emoji: 'üëàüó∫Ô∏èüëâ',    
            description: '–Ø –Ω–∞—à–µ–ª —á–∞—Å—Ç—å –∫–∞—Ä—Ç—ã! –ö–∞–∂–µ—Ç—Å—è, —Å–æ–∫—Ä–æ–≤–∏—â–µ –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º —Ä—è–¥—É',
            addToInventory: false,
            clickable: false,
            canActivate: (context) => {
                // Both map cards must be on the board
                const mapRResult = context.positionSystem.findCardById('map-r');
                const mapCResult = context.positionSystem.findCardById('map-c');

                if (!mapRResult || !mapCResult) return false;

                // Player must be at the intersection of map-r row and map-c column
                return mapRResult.position.row === context.playerPosition!.row && 
                       mapCResult.position.col === context.playerPosition!.col;
            },
            onPlace: (context) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –∫–∞—Ä—Ç—ã (map-c)
                const mapCResult = context.positionSystem.findCardById('map-c');
                const mapInInventory = context.inventory.findById('map');

                if (mapCResult && !mapInInventory) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                    const mapInventoryItem = new InventoryItem(mapCardSide, mapCardSide);
                    
                    return {
                        ...context,
                        inventory: context.inventory.add(mapInventoryItem)
                    };
                }
                
                return context;
            }
        },
        front: {
            id: 'rum',
            russianName: '–†–æ–º',
            lives: 1,
            type: 'front' as CardType,
            emoji: 'ü•É',
            description: '–†–æ–º! –ú–æ–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å —Å–∏–ª!',
            addToInventory: false,
            onPlace: (context) => {
                const card = context.positionSystem.getCard(context.playerPosition!);
                if (card) {
                    const { lives } = updateLives(context.lives, 1);
                    return { ...context, lives };
                }
                return context;
            }
        }
    },
    mapCol: {
        back: {
            id: 'map-c',
            russianName: '–ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â 2/2',
            type: 'back' as CardType,   
            emoji: 'üëáüó∫Ô∏è‚òùÔ∏è',
            description: '–Ø –Ω–∞—à–µ–ª —á–∞—Å—Ç—å –∫–∞—Ä—Ç—ã! –ö–∞–∂–µ—Ç—Å—è, —Å–æ–∫—Ä–æ–≤–∏—â–µ –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–µ',
            addToInventory: false,
            clickable: false,
            canActivate: (context) => {
                // Both map cards must be on the board
                const mapRResult = context.positionSystem.findCardById('map-r');
                const mapCResult = context.positionSystem.findCardById('map-c');

                if (!mapRResult || !mapCResult) return false;

                // Player must be at the intersection of map-r row and map-c column
                return mapRResult.position.row === context.playerPosition!.row && 
                       mapCResult.position.col === context.playerPosition!.col;
            },
            onPlace: (context) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∫–∞—Ä—Ç—ã (map-r)
                const mapRResult = context.positionSystem.findCardById('map-r');
                const mapInInventory = context.inventory.findById('map');
                
                if (mapRResult && !mapInInventory) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                    const mapInventoryItem = new InventoryItem(mapCardSide, mapCardSide);
                    
                    return {
                        ...context,
                        inventory: context.inventory.add(mapInventoryItem)
                    };
                }
                
                return context;
            }
        },
        front: {
            id: 'treasure',
            russianName: '–°–æ–∫—Ä–æ–≤–∏—â–µ',
            score: 10,
            type: 'front' as CardType,
            emoji: 'üíé',    
            description: '–¢–µ–ø–µ—Ä —ç—Ç–æ —Å–æ–∫—Ä–æ–≤–∏—â–µ –º–æ—ë! –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞—Ç—å—Å—è —Å –æ—Å—Ç—Ä–æ–≤–∞...',
            addToInventory: false,
        }
    },
} as const; 

export const ship: CardSide = {
    id: 'ship',
    russianName: '–ö–æ—Ä–∞–±–ª—å',
    type: 'ship' as CardType,
    emoji: '‚õµ',
    description: '–ö–æ—Ä–∞–±–ª—å –ø–ª—ã–≤–µ—Ç –≤–¥–æ–ª—å –±–µ—Ä–µ–≥–∞. –ù—É–∂–Ω–æ –∫–∞–∫-—Ç–æ –ø—Ä–∏–≤–ª–µ—á—å –µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏–µ!',
    addToInventory: false,
} as const; 