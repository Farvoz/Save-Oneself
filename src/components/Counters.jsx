import React, { useEffect, useState } from 'react';
import './Counters.css';

const PHASE_MESSAGES = {
    moving: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å–µ–¥–Ω—é—é –∫–ª–µ—Ç–∫—É',
    decreasingLives: '–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π...',
    checkingFlippable: '–ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫',
    shipMoving: '–î–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è...',
    gameOver: '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞'
};

const Counters = ({ lives, deckLength, state, handleSkipPhase }) => {
    const [livesAnimation, setLivesAnimation] = useState('');
    const [prevLives, setPrevLives] = useState(lives);

    useEffect(() => {
        if (lives !== prevLives) {
            setLivesAnimation(lives > prevLives ? 'lives-increase' : 'lives-decrease');
            setPrevLives(lives);
            
            // Remove animation class after animation completes
            const timer = setTimeout(() => {
                setLivesAnimation('');
            }, 500);
            
            return () => clearTimeout(timer);
        }
    }, [lives, prevLives]);

    const currentPhase = typeof state.value === 'object' ? state.value.playing : state.value;
    const message = PHASE_MESSAGES[currentPhase] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞';
    const showSkipButton = currentPhase === 'checkingFlippable';

    return (
        <div className="counters">
            <div className="game-stats">
                <div className="stat-item" style={{ color: lives <= 5 ? 'red' : 'inherit' }}>
                    <span className="counter-label">‚ù§Ô∏è </span>
                    <span className={`counter-value ${livesAnimation}`}>{lives}</span>
                </div>
                <div className="stat-item" style={{ color: deckLength <= 5 ? 'red' : 'inherit' }}>
                    <span className="counter-label">üé¥ </span>
                    <span className="counter-value">{deckLength}</span>
                </div>
                <div className="phase-content">
                    <span className="phase-message">{message}</span>
                    {showSkipButton && (
                        <button
                            className="skip-phase-button"
                            onClick={handleSkipPhase}
                        >
                            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                        </button>
                    )}
                </div>
            </div>
        </div>
    );
};

export default Counters; 