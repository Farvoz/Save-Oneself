import React from 'react';
import './CardTooltip.css';
import { GameCard } from '../core';

interface CardTooltipProps {
    card: GameCard;
    visible: boolean;
    position: { row: number; col: number };
}

export const CardTooltip: React.FC<CardTooltipProps> = ({ card, visible, position }) => {
    if (!visible) return null;

    const currentSide = card.getCurrentSide();
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Card.tsx)
    const getCardBackground = (cardObj: GameCard): string => {
        if (cardObj.getCurrentType() === 'ship') return '#87CEEB';
        if (cardObj.getCurrentType() === 'back') return '#F5F5DC';
        if (cardObj.getCurrentType() === 'front') return '#E8F5E9';
        return '#F5F5DC';
    };
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª–∏
    const cellSize = 100;
    const gridOffset = 4;
    const tooltipWidth = 300;
    const tooltipHeight = 200; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é grid –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const gridElement = document.querySelector('[data-testid="grid"]') as HTMLElement;
    const gridRect = gridElement?.getBoundingClientRect();
    const gridLeft = gridRect?.left || 0;
    const gridTop = gridRect?.top || 0;
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ä—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ grid
    const cardLeft = gridLeft + (position.col + gridOffset) * cellSize;
    const cardTop = gridTop + (position.row + gridOffset) * cellSize;
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º tooltip —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–∞—Ä—Ç—ã
    let left = cardLeft + cellSize + 10;
    let top = cardTop;
    let arrowClass = 'left-arrow'; // —Å—Ç—Ä–µ–ª–∫–∞ —Å–ª–µ–≤–∞, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É —Å–ø—Ä–∞–≤–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    
    // –ï—Å–ª–∏ tooltip –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–≤–∞
    if (left + tooltipWidth > viewportWidth - 20) {
        left = cardLeft - tooltipWidth - 10;
        arrowClass = 'right-arrow'; // —Å—Ç—Ä–µ–ª–∫–∞ —Å–ø—Ä–∞–≤–∞, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É —Å–ª–µ–≤–∞
    }
    
    // –ï—Å–ª–∏ tooltip –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–æ–¥–Ω–∏–º–∞–µ–º –µ–≥–æ
    if (top + tooltipHeight > viewportHeight - 20) {
        top = viewportHeight - tooltipHeight - 20;
    }
    
    // –ï—Å–ª–∏ tooltip –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (top < 20) {
        top = 20;
    }
    
    // –ï—Å–ª–∏ tooltip –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø—Ä–∞–≤–∞
    if (left < 20) {
        left = cardLeft + cellSize + 10;
        arrowClass = 'left-arrow';
    }

    const getSideInfo = (side: { emoji: string; id: string; russianName?: string; description?: string; lives?: number; score?: number; direction?: string; requirementsText?: string }, isCurrent: boolean, backgroundColor?: string) => {
        const emoji = side.emoji;
        const name = side.russianName || side.id;
        const description = side.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
        
        const sideStyle: React.CSSProperties = backgroundColor ? {
            backgroundColor: backgroundColor,
            borderLeftColor: backgroundColor
        } : {};
        
        return (
            <div 
                className={`side-info ${isCurrent ? 'current' : 'other'}`}
                style={sideStyle}
            >
                <div className="side-header">
                    <span className="side-emoji">{emoji}</span>
                    <span className="side-name">{name}</span>
                </div>
                <div className="side-description">{description}</div>
                
                {(side.lives || side.score || side.direction) && (
                    <div className="side-stats">
                        {side.lives && (
                            <span className="stat">{side.lives > 0 ? "üíñ" : "üíî"} {side.lives}</span>
                        )}
                        {side.score && (
                            <span className="stat">‚ú® {side.score}</span>
                        )}
                        {side.direction && (
                            <span className="stat">üß≠ {side.direction}</span>
                        )}
                    </div>
                )}
            </div>
        );
    };

    return (
        <div 
            className={`card-tooltip ${arrowClass}`}
            style={{
                left: `${left}px`,
                top: `${top}px`,
                '--tooltip-bg': '#f8f9fa',
                '--tooltip-border': '#dee2e6'
            } as React.CSSProperties}
        >
            <div className="card-tooltip-content">
                {/* –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—ã–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø–µ—Ä–≤–æ–π */}
                {card.getCurrentType() === 'back' ? (
                    getSideInfo(currentSide, true, getCardBackground(card))
                ) : (
                    getSideInfo(card.backSide, false, '#F5F5DC')
                )}
                
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ—Ä–∞–±–ª—å */}
                {card.getCurrentType() !== 'ship' && (
                    card.getCurrentType() === 'front' ? (
                        getSideInfo(currentSide, true, getCardBackground(card))
                    ) : (
                        <div className="side-info hidden">
                            <div className="side-header">
                                <span className="side-emoji">‚ùì</span>
                                <span className="side-name"><i>–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</i></span>
                            </div>
                            
                            <div className="side-requirements">
                                <span className="requirement">üìã –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å: {card.backSide.requirementsText || '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'}</span>
                            </div>
                        </div>
                    )
                )}
            </div>
        </div>
    );
};
