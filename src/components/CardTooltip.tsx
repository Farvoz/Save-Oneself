import React from 'react';
import './CardTooltip.css';
import { GameCard } from '../core';

interface CardTooltipProps {
    card: GameCard;
    visible: boolean;
    position: { row: number; col: number };
    isFlippable: boolean;
}

export const CardTooltip: React.FC<CardTooltipProps> = ({ card, visible, position, isFlippable }) => {
    if (!visible) return null;

    const currentSide = card.getCurrentSide();
    const otherSide = card.getCurrentType() === 'front' ? card.backSide : card.frontSide;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª–∏
    const cellSize = 100;
    const gridOffset = 4;
    const tooltipWidth = 300;
    const tooltipHeight = 200; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é grid –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const gridElement = document.querySelector('[data-testid="grid"]') as HTMLElement;
    const gridRect = gridElement?.getBoundingClientRect();
    const gridLeft = gridRect?.left || 0;
    const gridTop = gridRect?.top || 0;
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ä—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ grid
    const cardLeft = gridLeft + (position.col + gridOffset) * cellSize;
    const cardTop = gridTop + (position.row + gridOffset) * cellSize;
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º tooltip —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–∞—Ä—Ç—ã
    let left = cardLeft + cellSize + 10;
    let top = cardTop;
    let arrowClass = 'left-arrow'; // —Å—Ç—Ä–µ–ª–∫–∞ —Å–ª–µ–≤–∞, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É —Å–ø—Ä–∞–≤–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    
    // –ï—Å–ª–∏ tooltip –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–≤–∞
    if (left + tooltipWidth > viewportWidth - 20) {
        left = cardLeft - tooltipWidth - 10;
        arrowClass = 'right-arrow'; // —Å—Ç—Ä–µ–ª–∫–∞ —Å–ø—Ä–∞–≤–∞, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É —Å–ª–µ–≤–∞
    }
    
    // –ï—Å–ª–∏ tooltip –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–æ–¥–Ω–∏–º–∞–µ–º –µ–≥–æ
    if (top + tooltipHeight > viewportHeight - 20) {
        top = viewportHeight - tooltipHeight - 20;
    }
    
    // –ï—Å–ª–∏ tooltip –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (top < 20) {
        top = 20;
    }
    
    // –ï—Å–ª–∏ tooltip –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø—Ä–∞–≤–∞
    if (left < 20) {
        left = cardLeft + cellSize + 10;
        arrowClass = 'left-arrow';
    }

    const getSideInfo = (side: { emoji: string; id: string; description?: string; lives?: number; score?: number; direction?: string; requirementsText?: string }, isCurrent: boolean) => {
        const emoji = side.emoji;
        const name = side.id;
        const description = side.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
        
        return (
            <div className={`side-info ${isCurrent ? 'current' : 'other'}`}>
                <div className="side-header">
                    <span className="side-emoji">{emoji}</span>
                    <span className="side-name">{name}</span>
                </div>
                <div className="side-description">{description}</div>
                
                {(side.lives || side.score || side.direction) && (
                    <div className="side-stats">
                        {side.lives && (
                            <span className="stat">üíñ {side.lives}</span>
                        )}
                        {side.score && (
                            <span className="stat">‚ú® {side.score}</span>
                        )}
                        {side.direction && (
                            <span className="stat">üß≠ {side.direction}</span>
                        )}
                    </div>
                )}
            </div>
        );
    };

    return (
        <div 
            className={`card-tooltip ${arrowClass}`}
            style={{
                left: `${left}px`,
                top: `${top}px`,
            }}
        >
            <div className="card-tooltip-content">
                <div className="tooltip-header">
                    <span className="card-type">
                        {card.getCurrentType() === 'ship' ? 'üö¢ –ö–æ—Ä–∞–±–ª—å' : 'üé¥ –ö–∞—Ä—Ç–∞'}
                    </span>
                    {isFlippable && (
                        <span className="flip-indicator">üîÑ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å</span>
                    )}
                </div>
                
                {getSideInfo(currentSide, true)}
                
                {otherSide && (
                    <>
                        <div className="divider"></div>
                        {card.getCurrentType() === 'back' ? (
                            <div className="side-info other">
                                <div className="side-header">
                                    <span className="side-emoji">‚ùì</span>
                                    <span className="side-name">–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</span>
                                </div>
                                <div className="side-description">–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</div>
                                
                                <div className="side-requirements">
                                    <span className="requirement">üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞: {card.backSide.requirementsText || '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'}</span>
                                </div>
                            </div>
                        ) : (
                            getSideInfo(otherSide, false)
                        )}
                    </>
                )}
            </div>
        </div>
    );
};
