import { useEffect, useState } from 'react';
import { GameState } from '../core/initial';
import './Counters.css';
import { HoverTooltip } from './uikit';
import { TooltipContent } from './TooltipContent';

type GamePhase = 'moving' | 'decreasingLives' | 'checkingFlippable' | 'shipMoving' | 'gameOver';

const GAME_PHASES = [
    { id: 'moving' as GamePhase, emoji: 'üö∂', title: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è' },
    { id: 'decreasingLives' as GamePhase, emoji: 'üíî', title: '–í–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å–µ —Ç—Ä—É–¥–Ω–µ–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ...' },
    { id: 'checkingFlippable' as GamePhase, emoji: 'üîÑ', title: '–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–∑—É' },
    { id: 'shipMoving' as GamePhase, emoji: '‚õµ', title: '–î–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è' }
];

const COUNTERS_TOOLTIPS = {
    lives: {
        title: "–ñ–∏–∑–Ω–∏",
        description: "–í–∞—à –∑–∞–ø–∞—Å —Å–∏–ª –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ",
        details: [
            "–ï—Å–ª–∏ –∂–∏–∑–Ω–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –≤—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç–µ –∏–≥—Ä—É",
            "–ñ–∏–∑–Ω–∏ —Ç–µ—Ä—è—é—Ç—Å—è –≤ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö: —à—Ç–æ—Ä–º, –¥–∏–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏ —Ç.–¥.",
            "–ñ–∏–∑–Ω–∏ –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—è –ø–æ–ª–µ–∑–Ω—ã–µ –∫–∞—Ä—Ç—ã: —Ä—ã–±–∞ (+3), –º—è—Å–æ (+3), –∫–æ–∫–æ—Å—ã (+2), –≤–æ–¥–∞ (+2), —É–±–µ–∂–∏—â–µ (+2)",
            "–ö–æ–≥–¥–∞ –∂–∏–∑–Ω–µ–π –æ—Å—Ç–∞–µ—Ç—Å—è 5 –∏–ª–∏ –º–µ–Ω—å—à–µ, —á–∏—Å–ª–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º",
            "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π ‚Äî 16"
        ],
        mechanics: "–ñ–∏–∑–Ω–∏ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è. –ë–µ—Ä–µ–≥–∏—Ç–µ –∏—Ö!"
    },
    score: {
        title: "–û—á–∫–∏",
        description: "–°–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:",
        details: [
            "1 –æ—á–∫–æ –∑–∞ –∫–∞–∂–¥—É—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –∂–∏–∑–Ω—å –∏–≥—Ä–æ–∫–∞",
            "1 –æ—á–∫–æ –∑–∞ –∫–∞–∂–¥—ã–µ 4 —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ—Å—Ç—Ä–æ–≤–∞",
            "–∑–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ –ø–æ–ª–µ",
        ],
        mechanics: "–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –Ω–∞–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!"
    },
    phases: {
        title: "–§–∞–∑—ã –∏–≥—Ä—ã",
        description: "",
        details: [
            "üö∂ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: –æ—Å—Ç—Ä–æ–≤ 4 –≤ —à–∏—Ä–∏–Ω—É –∏ 4 –≤ –¥–ª–∏–Ω—É",
            "üíî –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –∂–∏–∑–Ω–∏ –Ω–∞ 1",
            "üîÑ –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç: –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –µ—ë –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É",
            "‚õµ –î–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è: –∫–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤–¥–æ–ª—å –±–µ—Ä–µ–≥–∞ –æ—Å—Ç—Ä–æ–≤–∞"
        ],
        mechanics: "–ö–∞–∂–¥–∞—è —Ñ–∞–∑–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
    },
    skipButton: {
        title: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É",
        description: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç",
        details: [
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "–ü–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è."
        ],
        mechanics: "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É, —á–µ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç—É."
    },
    helpRules: {
        title: "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã",
        description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ Marooned",
        details: [
            "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –Ω–∞ BoardGameGeek",
            "–°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∫ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
            "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–æ–Ω–∫–æ—Å—Ç–µ–π –∏–≥—Ä—ã",
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–æ–π"
        ],
        mechanics: "–ó–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è!"
    },
    helpVideo: {
        title: "‚ñ∂Ô∏è –í–∏–¥–µ–æ-–æ–±—É—á–µ–Ω–∏–µ",
        description: "–õ–µ—Ç—Å–ø–ª–µ–π —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏–≥—Ä—ã",
        details: [
            "–í–∏–¥–µ–æ-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä—ã Marooned",
            "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ç–∞–∫—Ç–∏–∫–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–∏",
            "–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ",
            "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –∏–≥—Ä—ã"
        ],
        mechanics: "–í–∏–¥–µ–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ!"
    }
} as const;

interface CountersProps {
    lives: number;
    score: number;
    state: GameState;
    handleSkipPhase: () => void;
}

const Counters: React.FC<CountersProps> = ({ lives, score, state, handleSkipPhase }) => {
    const [livesAnimation, setLivesAnimation] = useState<string>('');
    const [prevLives, setPrevLives] = useState<number>(lives);

    useEffect(() => {
        if (lives !== prevLives) {
            setLivesAnimation(lives > prevLives ? 'lives-increase' : 'lives-decrease');
            setPrevLives(lives);
            
            // Remove animation class after animation completes
            const timer = setTimeout(() => {
                setLivesAnimation('');
            }, 500);
            
            return () => clearTimeout(timer);
        }
    }, [lives, prevLives]);

    const currentPhase = typeof state.value === 'object' ? state.value.playing as GamePhase : state.value as GamePhase;
    const currentPhaseData = GAME_PHASES.find(phase => phase.id === currentPhase);
    const message = currentPhaseData?.title || '';
    const showSkipButton = currentPhase === 'checkingFlippable';

    return (
        <div className="counters">
            <div className="game-stats">
                <HoverTooltip
                    content={
                        <TooltipContent
                            title={COUNTERS_TOOLTIPS.lives.title}
                            description={COUNTERS_TOOLTIPS.lives.description}
                            details={COUNTERS_TOOLTIPS.lives.details}
                            mechanics={COUNTERS_TOOLTIPS.lives.mechanics}
                        />
                    }
                >
                    <div className="stat-item" style={{ color: lives <= 5 ? 'var(--text-error)' : 'inherit' }}>
                        <span className="counter-label">‚ù§Ô∏è </span>
                        <span className={`counter-value ${livesAnimation}`}>{lives}</span>
                    </div>
                </HoverTooltip>
                <HoverTooltip
                    content={
                        <TooltipContent
                            title={COUNTERS_TOOLTIPS.score.title}
                            description={COUNTERS_TOOLTIPS.score.description}
                            details={COUNTERS_TOOLTIPS.score.details}
                            mechanics={COUNTERS_TOOLTIPS.score.mechanics}
                        />
                    }
                >
                    <div className="stat-item">
                        <span className="counter-label">‚≠ê </span>
                        <span className="counter-value">{score}</span>
                    </div>
                </HoverTooltip>
                <div className="phase-content">
                    <HoverTooltip
                        content={
                            <TooltipContent
                                title={COUNTERS_TOOLTIPS.phases.title}
                                description={COUNTERS_TOOLTIPS.phases.description}
                                details={COUNTERS_TOOLTIPS.phases.details}
                                mechanics={COUNTERS_TOOLTIPS.phases.mechanics}
                            />
                        }
                    >
                        <div className="game-phases">
                            {GAME_PHASES.map((phase, index) => (
                                <>
                                    <span
                                        className={`phase-emoji ${currentPhase === phase.id ? 'active' : ''}`}
                                        title={phase.title}
                                    >
                                        {phase.emoji}
                                    </span>
                                    {index < GAME_PHASES.length - 1 && (
                                        <span key={`arrow-${index}`} className="phase-arrow">‚Üí</span>
                                    )}
                                </>
                            ))}
                        </div>
                    </HoverTooltip>
                    <span className="phase-message">{message}</span>
                    {showSkipButton && (
                        <HoverTooltip
                            content={
                                <TooltipContent
                                    title={COUNTERS_TOOLTIPS.skipButton.title}
                                    description={COUNTERS_TOOLTIPS.skipButton.description}
                                    details={COUNTERS_TOOLTIPS.skipButton.details}
                                    mechanics={COUNTERS_TOOLTIPS.skipButton.mechanics}
                                />
                            }
                        >
                            <button
                                className="skip-phase-button"
                                onClick={handleSkipPhase}
                            >
                                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                            </button>
                        </HoverTooltip>
                    )}
                    {/* –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞—Ç—å—Å—è –∑–¥–µ—Å—å" —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Ñ–∏–≥—É—Ä–∫—É –∏–≥—Ä–æ–∫–∞ */}
                </div>
                <div className="help-links">
                    <HoverTooltip
                        content={
                            <TooltipContent
                                title={COUNTERS_TOOLTIPS.helpRules.title}
                                description={COUNTERS_TOOLTIPS.helpRules.description}
                                details={COUNTERS_TOOLTIPS.helpRules.details}
                                mechanics={COUNTERS_TOOLTIPS.helpRules.mechanics}
                            />
                        }
                    >
                        <a href="https://boardgamegeek.com/filepage/132096/marooned-rules" target="_blank" rel="noreferrer noopener" className="help-link-text">?</a>
                    </HoverTooltip>
                    <HoverTooltip
                        content={
                            <TooltipContent
                                title={COUNTERS_TOOLTIPS.helpVideo.title}
                                description={COUNTERS_TOOLTIPS.helpVideo.description}
                                details={COUNTERS_TOOLTIPS.helpVideo.details}
                                mechanics={COUNTERS_TOOLTIPS.helpVideo.mechanics}
                            />
                        }
                    >
                        <a href="https://www.youtube.com/watch?v=WcO8Ln88VQU" target="_blank" rel="noreferrer noopener" className="help-link-text">‚ñ∂</a>
                    </HoverTooltip>
                </div>
            </div>
        </div>
    );
};

export default Counters; 